buildscript {
	repositories {
		maven { url = 'https://repo.eclipse.org/content/groups/releases/' }
		mavenCentral()
	}
	dependencies {
		classpath 'dev.nokee:docs-gradle-plugin:latest.integration'
	}
}
plugins {
	id 'dev.nokee.documentation.jbake-ingredients'
}

import dev.nokee.docs.SecretValue
import dev.nokee.docs.tasks.GenerateRobots
import dev.nokee.docs.tasks.GenerateSitemap
import dev.nokee.docs.tasks.PublishToGitHubPages

import java.text.SimpleDateFormat
import java.util.concurrent.TimeUnit

import static dev.nokee.docs.Filters.*
import static dev.nokee.docs.RepositoryUtils.nokeeDocumentation

def v = new SimpleDateFormat("yyyyMMddHHmm").format(new Date())
allprojects {
	group = 'dev.nokee.docs'
	version = v
}

// Ensure the `bake` tasks aren't ran in parallel, there is a bug in the JBake site plugin that cause random crashes
// See https://github.com/jbake-org/jbake-gradle-plugin/issues/53
GroovyCollections.transpose(subprojects.drop(1).asList(), subprojects as List).each {
	def downstream = it[0]
	def upstream = it[1]
	upstream.afterEvaluate { proj ->
		proj.evaluationDependsOn(downstream.path)
		proj.tasks.named('bake') {
			it.mustRunAfter(downstream.tasks.named('bake'))
		}
	}
}

// Configure each javadoc tasks
subprojects {
	pluginManager.withPlugin('dev.nokee.documentation.javadoc') {
		tasks.named('javadoc', Javadoc) {
			StandardJavadocDocletOptions options = it.options as StandardJavadocDocletOptions
			options.setEncoding("utf-8")
			options.setDocEncoding("utf-8")
			options.setCharSet("utf-8")
			options.links("https://docs.oracle.com/javase/${project.ext.minimumJavaVersion}/docs/api", "https://docs.gradle.org/${project.ext.minimumGradleVersion}/javadoc/")
		}
	}
}

// Configure AWS repository containing all documentation artifacts
allprojects {
	repositories {
		maven(nokeeDocumentation())
	}
}

// Publish baked elements to Nokee documentation
subprojects {
	apply plugin 'maven-publish'
	publishing {
		repositories {
			maven(nokeeDocumentation())
		}
		publications {
			baked(MavenPublication) {
				from components.baked
			}
		}
	}
}

// Disable caching for all configuration - so we always pull the latest regardless
allprojects {
	configurations.all {
		resolutionStrategy { ResolutionStrategy r ->
			r.cacheDynamicVersionsFor(0, TimeUnit.SECONDS)
		}
	}
}

// Generate documentation site
dependencies {
	baked('dev.nokee.docs:nightly:latest.integration') { changing = true }
	assets 'dev.nokee.docs:jbake:latest.integration' // nothing is deployed here :-( everything is in nightly
}

def sitemapTask = tasks.register('sitemap', GenerateSitemap) {
	generatedSitemapFile = file('build/tmp/sitemap/sitemap.xml')
}

def robotsTask = tasks.register('robots', GenerateRobots) {
	host = 'docs.nokee.dev'
	generatedRobotsFile = file('build/tmp/robots/robots.txt')
}

def siteTask = tasks.named('site', Sync) {
	from(sitemapTask.flatMap { it.generatedSitemapFile })
	from(robotsTask.flatMap { it.generatedRobotsFile })
}
subprojects.each { Project proj ->
	dependencies {
		baked proj
	}
	sitemapTask.configure {
		sitemapUrls.addAll(
			config.incoming.files.elements
				.map { toSitemapUrl(withHost('docs.nokee.dev').transform(asCanonicalPaths(withoutRedirectionPages(findAllHtmlFiles(it))))) })
	}
}

tasks.register('deploy') {
	dependsOn(siteTask)
}

tasks.register('publish', PublishToGitHubPages) {
	publishDirectory = siteTask.map { it.destinationDir }
	gitHubKey = providers.of(SecretValue) { it.parameters.from('GITHUB_KEY').or('dev.nokee.github.key').orDefault('nokeedevbot') }
	gitHubSecret = providers.of(SecretValue) { it.parameters.from('GITHUB_TOKEN').or('dev.nokee.github.secret') }
}
