import dev.nokee.docs.SecretValue
import dev.nokee.docs.tasks.GenerateRobots
import dev.nokee.docs.tasks.GenerateSitemap
import dev.nokee.docs.tasks.PublishToGitHubPages

import java.text.SimpleDateFormat

import static dev.nokee.docs.Filters.*

def v = new SimpleDateFormat("yyyyMMddHHmm").format(new Date())
allprojects {
	group = 'dev.nokee.docs'
	version = v
}

// Ensure the `bake` tasks aren't ran in parallel, there is a bug in the JBake site plugin that cause random crashes
// TODO: Open issue with JBake site plugin to solve this issue, most likely they should use the worker API
GroovyCollections.transpose(subprojects.drop(1).asList(), subprojects as List).each {
	def downstream = it[0]
	def upstream = it[1]
	upstream.afterEvaluate { proj ->
		proj.evaluationDependsOn(downstream.path)
		proj.tasks.named('bake') {
			it.mustRunAfter(downstream.tasks.named('bake'))
		}
	}
}

def sitemapTask = tasks.register('sitemap', GenerateSitemap) {
	generatedSitemapFile = file('build/tmp/sitemap/sitemap.xml')
}

def robotsTask = tasks.register('robots', GenerateRobots) {
	host = 'docs.nokee.dev'
	generatedRobotsFile = file('build/tmp/robots/robots.txt')
}

def syncTask = tasks.register('sync', Sync) {
	into(layout.buildDirectory.dir('site'))
	from(sitemapTask.flatMap { it.generatedSitemapFile })
	from(robotsTask.flatMap { it.generatedRobotsFile })
}
def ARTIFACT_FORMAT = Attribute.of("artifactType", String)
subprojects.each { Project proj ->
	def config = configurations.create("release${proj.name}") {
		canBeConsumed = false
		canBeResolved = true
		attributes {
			attribute(DocsType.DOCS_TYPE_ATTRIBUTE, objects.named(DocsType, 'jbake-baked'))
			attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.DOCUMENTATION))
			attribute(ARTIFACT_FORMAT, ArtifactTypeDefinition.DIRECTORY_TYPE)
		}
	}
	dependencies {
		add(config.name, proj)
	}
	syncTask.configure {
		from(config) {
			from('docs')
		}
	}
	sitemapTask.configure {
		sitemapUrls.addAll(
			config.incoming.files.elements
				.map { toSitemapUrl(withHost('docs.nokee.dev').transform(asCanonicalPaths(withoutRedirectionPages(findAllHtmlFiles(it))))) })
	}
}

tasks.register('deploy') {
	dependsOn(syncTask)
}

tasks.register('publish', PublishToGitHubPages) {
	publishDirectory = layout.buildDirectory.dir('site')
	gitHubKey = providers.of(SecretValue) { it.parameters.from('GITHUB_KEY').or('dev.nokee.github.key').orDefault('nokeedevbot') }
	gitHubSecret = providers.of(SecretValue) { it.parameters.from('GITHUB_TOKEN').or('dev.nokee.github.secret') }
}
